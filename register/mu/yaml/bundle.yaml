{
  "swagger": "2.0",
  "info": {
    "version": "DLS Version 0.8",
    "title": "Services for Matriklen på Datafordeleren",
    "description": "## Matriklen\nMatriklen er grundlaget for ejendomsregistreringen i Danmark og udgør en vigtig del af administrationsgrundlaget i den offentlige forvaltning.\nMatriklen består konceptuelt af\n* Matrikelregistret\n* Matrikelkortet\n* Matrikelarkivet.\n\nRegistret indeholder oplysninger om arealer, herunder evt. vej- eller vandløbsarealer noteringsforhold (f.eks. om landbrugsejendomme, samlede faste ejendomme eller fredskov).\nMatrikelkortet er et digitalt, juridisk kortværk, som viser de registrerede ejendomsgrænser og vejrettigheder. I matrikelkortet vises også de fredskovsbelagte arealer, zoner for strandbeskyttelse og klitfredning. Matrikelarkivet indeholder bl.a. tidligere gældende matrikelkort, matrikelprotokoller og registrerede matrikulære sager, herunder måloplysninger.\nMatrikelregistret og matrikelkortet er integreret i én samlet datamodel, hvor ”Matrikulære data” er det bærende dataelement.\n\nMatrikulære data kan deles op i tre grupper:\n1. Elementer i basismatriklen\n2. Øvrige elementer\n3. Temaer.\n\n**Elementer i basismatriklen**\nBasismatriklen indeholder de elementer, der indgår i den matrikulære proces, og de er vigtige elementer i bestemmelsen af den grundlæggende matrikulære situation.\n\n* Matrikelskel\n* Optaget vej\n* Jordstykke\n* Centroidepunkt\n* Skelpunkt\n* Fikspunkt\n* Grænsesten\n\n**Øvrige elementer** indeholder administrative og matrikulære områder, der automatisk kan afledes ud fra elementer i basismatriklen. De indgår således ikke direkte i den matrikulære proces, men kan bruges som støttemateriale i processen. Temaer: Region, kommune, sogn, ejerlav, herred, opmålingsdistrikt.\n\nEndelig er **temaer** elementer, der bygger på den grundlæggende matrikulære situation, og som indgår i den matrikulære proces (jordrente, majoratskov, stormfald, fredskov, strandbeskyttelse, klitfredning, notering om jordforurening).\n## URL opbygning\n\nURL for de enkelte REST services er opbygget af et **endpoint** efterfulgt af **registernavn**, **servicenavn**, **versionen** af servicen, **servicetype** (REST eller WFS etc.) samt **metodenavn** for REST services. Efter ? tilføjes parametre i kaldet, der kan indeholde generelle kaldeparametre for REST services og metode specifikke parametre.\n\nEndpointet indeholder værtsnavnet, med et præfiks for miljøet hvis det ikke er produktionsmiljøet der tilgås. Hvis der er tale om fortrolige eller følsomme data, følger S5. Se miljøbeskrivelser på Datafordeler.dk\n\n\n| URL-struktur for REST services |  endpoint/register/service/version/servicetype/metode |\n| ------------------------------ | ------------------------------------------------------ |\n| Eksempel   |  https://services.datafordeler.dk/MATRIKEL/Matrikel/1/REST/SamletFastEjendom |\n",
    "termsOfService": "http://datafordeler.dk",
    "contact": {
      "name": "Datafordeler support",
      "url": "http://datafordeler.dk",
      "email": "support@datafordeler.dk"
    }
  },
  "externalDocs": {
    "description": "Detaljeret beskrivelse af brugen af services på datafordeleren\n",
    "url": "http://datafordeler.dk/api"
  },
  "tags": [
    {
      "name": "Ejendom",
      "description": "Services for Samlet fast ejendom, Bygning på fremmed grund og Ejerlejlighed",
      "externalDocs": {
        "description": "Dokumentation af ejendomsbegrebet",
        "url": "http://gst.dk/ejendomme"
      }
    },
    {
      "name": "Matrikulær Sag",
      "description": "Matrikulær sager",
      "externalDocs": {
        "description": "Dokumentation af matrikulære sags",
        "url": "http://gst.dk/matirkulæresager"
      }
    },
    {
      "name": "GEO",
      "description": "Services for matriklære kort",
      "externalDocs": {
        "description": "Dokumentation af matrikulære sags",
        "url": "http://gst.dk/matirkulæresagskort"
      }
    },
    {
      "name": "Persons",
      "description": "Everything you need to handle `users` and `friends`",
      "externalDocs": {
        "description": "People category documentation",
        "url": "http://doc.simple.api/people"
      }
    },
    {
      "name": "Items",
      "description": "Everything you need to handle items collected by users",
      "externalDocs": {
        "description": "Items category documentation",
        "url": "http://doc.simple.api/items"
      }
    },
    {
      "name": "Media",
      "description": "Everything you need to handle images",
      "externalDocs": {
        "description": "Media category documentation",
        "url": "http://doc.simple.api/media"
      }
    },
    {
      "name": "JSLess",
      "description": "Specific operations for JS less consumers",
      "externalDocs": {
        "description": "JS Less Consumers documentation",
        "url": "http://doc.simple.api/jsless"
      }
    }
  ],
  "schemes": [
    "https"
  ],
  "host": "services.datafordeler.dk",
  "basePath": "/MATRIKEL/Matrikel/1/REST",
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "securityDefinitions": {
    "OauthSecurity": {
      "description": "New Oauth security system. Do not use MediaSecurity or LegacySecurity.",
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://oauth.simple.api/authorization",
      "tokenUrl": "https://oauth.simple.api/token",
      "scopes": {
        "admin": "Admin scope",
        "user": "User scope"
      }
    },
    "MediaSecurity": {
      "description": "Specific media security for backward compatibility. Use OauthSecurity instead.",
      "type": "apiKey",
      "in": "query",
      "name": "media-api-key"
    },
    "LegacySecurity": {
      "description": "Legacy security system for backward compatibility. Use OauthSecurity instead.",
      "type": "basic"
    }
  },
  "security": [
    {
      "OauthSecurity": [
        "user"
      ]
    },
    {
      "LegacySecurity": []
    }
  ],
  "paths": {
    "/MatrikelKommune": {
      "get": {
        "summary": "Søg kommunenavn eller kommunekode",
        "description": "Søg kommunenavn eller kommunekode\nFølgende parametre er obligatoriske:\n  * **Kommunenavn** ELLER\n  * **Kommunekode**.\n\nEr de ikke sat fås ingen resultater.\n",
        "tags": [
          "Ejendom"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Kommunenavn"
          },
          {
            "$ref": "#/parameters/Kommunekode"
          },
          {
            "$ref": "#/parameters/RegistreringstidFra"
          },
          {
            "$ref": "#/parameters/RegistreringstidTil"
          },
          {
            "$ref": "#/parameters/Registreringstid"
          },
          {
            "$ref": "#/parameters/VirkningstidFra"
          },
          {
            "$ref": "#/parameters/VirkningstidTil"
          },
          {
            "$ref": "#/parameters/Virkningstid"
          },
          {
            "$ref": "#/parameters/Status"
          },
          {
            "$ref": "#/parameters/format"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/pageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "En liste af kommuner",
            "schema": {
              "$ref": "#/definitions/MatrikelKommmune"
            }
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "default": {
            "$ref": "#/responses/TotallyUnexpectedResponse"
          }
        }
      }
    },
    "/MatrikulaerSag": {
      "get": {
        "summary": "Gets a person",
        "description": "Returns a single person for its username.",
        "operationId": "readPerson",
        "tags": [
          "Matrikulær Sag"
        ],
        "responses": {
          "200": {
            "description": "A Person",
            "schema": {
              "$ref": "#/definitions/Person"
            },
            "headers": {
              "X-Rate-Limit-Remaining": {
                "description": "How many calls consumer can do",
                "type": "integer"
              },
              "X-Rate-Limit-Reset": {
                "description": "When rate limit will be reset",
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "404": {
            "$ref": "#/responses/PersonDoesNotExistResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "default": {
            "$ref": "#/responses/TotallyUnexpectedResponse"
          }
        }
      },
      "delete": {
        "summary": "Deletes a person",
        "description": "Delete a single person identified via its username",
        "operationId": "deletePerson",
        "tags": [
          "Persons"
        ],
        "responses": {
          "204": {
            "description": "Person successfully deleted.",
            "headers": {
              "X-Rate-Limit-Remaining": {
                "description": "How many calls consumer can do",
                "type": "integer"
              },
              "X-Rate-Limit-Reset": {
                "description": "When rate limit will be reset",
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "404": {
            "$ref": "#/responses/PersonDoesNotExistResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "default": {
            "$ref": "#/responses/TotallyUnexpectedResponse"
          }
        }
      }
    },
    "/persons/{username}/friends": {
      "parameters": [
        {
          "$ref": "#/parameters/username"
        },
        {
          "$ref": "#/parameters/userAgent"
        }
      ],
      "get": {
        "summary": "Gets a person's friends",
        "description": "Returns a list containing all persons. The list supports paging.",
        "operationId": "readPersonsFriends",
        "tags": [
          "Persons"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/pageNumber"
          },
          {
            "$ref": "#/parameters/includeNonVerifiedUsers"
          },
          {
            "$ref": "#/parameters/sortPersons"
          }
        ],
        "responses": {
          "200": {
            "description": "A person's friends list",
            "schema": {
              "$ref": "#/definitions/PagedPersons"
            },
            "headers": {
              "X-Rate-Limit-Remaining": {
                "description": "How many calls consumer can do",
                "type": "integer"
              },
              "X-Rate-Limit-Reset": {
                "description": "When rate limit will be reset",
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "404": {
            "$ref": "#/responses/PersonDoesNotExistResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "default": {
            "$ref": "#/responses/TotallyUnexpectedResponse"
          }
        }
      }
    },
    "/persons/{username}/collecting-items": {
      "parameters": [
        {
          "$ref": "#/parameters/username"
        },
        {
          "$ref": "#/parameters/userAgent"
        }
      ],
      "get": {
        "summary": "Gets a person's collecting items list",
        "description": "Returns a list containing all items this person is looking for.\nThe list supports paging.\n",
        "operationId": "readPersonsCollectingItems",
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/pageNumber"
          },
          {
            "$ref": "#/parameters/filterItemTypes"
          }
        ],
        "responses": {
          "200": {
            "description": "A collected items list",
            "schema": {
              "$ref": "#/definitions/PagedCollectingItems"
            },
            "headers": {
              "X-Rate-Limit-Remaining": {
                "description": "How many calls consumer can do",
                "type": "integer"
              },
              "X-Rate-Limit-Reset": {
                "description": "When rate limit will be reset",
                "type": "string",
                "format": "date-time"
              }
            },
            "examples": {
              "application/json": {
                "totalItems": 10,
                "totalPage": 4,
                "pageSize": 3,
                "currentPage": 2,
                "items": [
                  {
                    "itemType": "Vinyl",
                    "maxPrice": 20,
                    "imageId": "98096838-04eb-4bac-b32e-cd5b7196de71",
                    "albumName": "Captain Future Original Soundtrack",
                    "artist": "Yuji Ohno"
                  },
                  {
                    "itemType": "VHS",
                    "maxPrice": 10,
                    "imageId": "b74469bc-e6a1-4a90-858a-88ef94079356",
                    "movieTitle": "Star Crash",
                    "director": "Luigi Cozzi"
                  },
                  {
                    "itemType": "AudioCassette",
                    "maxPrice": 10,
                    "imageId": "b74469bc-e6a1-4a90-858a-88ef94079356",
                    "albumName": "Star Wars",
                    "artist": "John Williams"
                  }
                ]
              }
            }
          },
          "404": {
            "$ref": "#/responses/PersonDoesNotExistResponse"
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "default": {
            "$ref": "#/responses/TotallyUnexpectedResponse"
          }
        }
      }
    },
    "/images": {
      "parameters": [
        {
          "$ref": "#/parameters/userAgent"
        }
      ],
      "post": {
        "summary": "Uploads an image",
        "description": "Upload an image, will return an image id.",
        "operationId": "storeImage",
        "externalDocs": {
          "description": "How to upload media",
          "url": "http://doc.simple.api/media/upload"
        },
        "tags": [
          "Media"
        ],
        "security": [
          {
            "MediaSecurity": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "image",
            "in": "formData",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Image's ID",
            "schema": {
              "properties": {
                "imageId": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "X-Rate-Limit-Remaining": {
                "description": "How many calls consumer can do",
                "type": "integer"
              },
              "X-Rate-Limit-Reset": {
                "description": "When rate limit will be reset",
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "default": {
            "$ref": "#/responses/TotallyUnexpectedResponse"
          }
        }
      }
    },
    "/images/{imageId}": {
      "parameters": [
        {
          "$ref": "#/parameters/userAgent"
        }
      ],
      "get": {
        "summary": "Gets an image",
        "description": "Return an image",
        "operationId": "readImage",
        "tags": [
          "Media"
        ],
        "parameters": [
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "image/png",
          "image/gif",
          "image/jpeg",
          "application/json",
          "application/x-yaml"
        ],
        "responses": {
          "200": {
            "description": "The image",
            "headers": {
              "X-Rate-Limit-Remaining": {
                "description": "How many calls consumer can do",
                "type": "integer"
              },
              "X-Rate-Limit-Reset": {
                "description": "When rate limit will be reset",
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "404": {
            "description": "Image do not exists",
            "headers": {
              "X-Rate-Limit-Remaining": {
                "description": "How many calls consumer can do",
                "type": "integer"
              },
              "X-Rate-Limit-Reset": {
                "description": "When rate limit will be reset",
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "500": {
            "$ref": "#/responses/Standard500ErrorResponse"
          },
          "default": {
            "$ref": "#/responses/TotallyUnexpectedResponse"
          }
        }
      }
    }
  },
  "definitions": {
    "$ref": "definitions.yaml"
  },
  "responses": {
    "Standard500ErrorResponse": {
      "description": "An unexpected error occured.",
      "headers": {
        "X-Rate-Limit-Remaining": {
          "description": "How many calls consumer can do",
          "type": "integer"
        },
        "X-Rate-Limit-Reset": {
          "description": "When rate limit will be reset",
          "type": "string",
          "format": "date-time"
        }
      },
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "PersonDoesNotExistResponse": {
      "description": "Person does not exist.",
      "headers": {
        "X-Rate-Limit-Remaining": {
          "description": "How many calls consumer can do",
          "type": "integer"
        },
        "X-Rate-Limit-Reset": {
          "description": "When rate limit will be reset",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "TotallyUnexpectedResponse": {
      "description": "A totally unexpected response",
      "headers": {
        "X-Rate-Limit-Remaining": {
          "description": "How many calls consumer can do",
          "type": "integer"
        },
        "X-Rate-Limit-Reset": {
          "description": "When rate limit will be reset",
          "type": "string",
          "format": "date-time"
        }
      }
    }
  },
  "parameters": {
    "username": {
      "name": "username",
      "in": "path",
      "required": true,
      "description": "The person's username",
      "type": "string"
    },
    "pageSize": {
      "name": "pageSize",
      "in": "query",
      "description": "Number of records returned",
      "type": "integer",
      "format": "int32",
      "minimum": 1,
      "default": 1
    },
    "pageNumber": {
      "name": "pageNumber",
      "in": "query",
      "description": "Page number",
      "type": "integer",
      "default": 1
    },
    "format": {
      "name": "format",
      "in": "query",
      "description": "Output format xml or json",
      "type": "string",
      "default": "json"
    },
    "Kommunenavn": {
      "name": "Kommunenavn",
      "in": "query",
      "description": "Kommunenavn EAID_CBF5C68F_2889_4104_B423_22B718D1DA8B",
      "type": "string",
      "default": "Roskilde"
    },
    "Kommunekode": {
      "name": "Kommunekode",
      "in": "query",
      "description": "Fire-cifret kommunekode EAID_A8B32F95_988E_4efb_B3AD_4920B839393B",
      "type": "string",
      "pattern": "\\d{4}",
      "default": "0175"
    },
    "RegistreringstidFra": {
      "name": "RegistreringstidFra",
      "in": "query",
      "description": "Fra dato i registreringstidsperioden EAID_05A5039B_ACFF_4754_BEA9_BD2EBC8F5C6A",
      "type": "string",
      "format": "date-time"
    },
    "RegistreringstidTil": {
      "name": "RegistreringstidTil",
      "in": "query",
      "description": "Til dato i registreringstidsperioden EAID_6DA20624_44E5_441b_87E4_CDF7765666D7",
      "type": "string",
      "format": "date-time"
    },
    "Registreringstid": {
      "name": "Registreringstid",
      "in": "query",
      "description": "Dato som falder indenfor en registreringstidsperiode. Anvendes fx 2015-09-02 vil de instanser med en gældende registreringstid på denne dato udvælges EAID_05A5039B_ACFF_4754_BEA9_BD2EBC8F5C6A",
      "type": "string",
      "format": "date-time"
    },
    "VirkningstidFra": {
      "name": "VirkningstidFra",
      "in": "query",
      "description": "Fra dato i virkningstidsperioden EAID_E5614463_E808_4491_8205_E30FB93CF3C8",
      "type": "string",
      "format": "date-time"
    },
    "VirkningstidTil": {
      "name": "VirkningstidTil",
      "in": "query",
      "description": "Til dato i virkningstidsperioden EAID_4AE908FA_CBA2_458b_AE3F_C925D5C3A54B",
      "type": "string",
      "format": "date-time"
    },
    "Virkningstid": {
      "name": "Virkningstid",
      "in": "query",
      "description": "Dato som falder indenfor en virkningstidsperiode. Anvendes fx 2015-09-02 vil de instanser med en gældende virkningstid på denne dato udvælges EAID_E5614463_E808_4491_8205_E30FB93CF3C8",
      "type": "string",
      "format": "date-time"
    },
    "Status": {
      "name": "Status",
      "in": "query",
      "description": "Status jf. modellens udfaldsrum EAID_8972BCDE_C722_475d_8E2E_1869DBFAA78D",
      "type": "string"
    },
    "includeNonVerifiedUsers": {
      "name": "includeNonVerifiedUsers",
      "in": "query",
      "description": "Result will not include non verified user by default if this parameter is not provided",
      "type": "boolean",
      "default": false,
      "allowEmptyValue": true
    },
    "sortPersons": {
      "name": "sort",
      "in": "query",
      "description": "Result will be sorted by lastTimeOnline descending and username ascending by default if this parameter is not provided",
      "type": "array",
      "uniqueItems": true,
      "minItems": 1,
      "maxItems": 3,
      "collectionFormat": "pipes",
      "items": {
        "type": "string",
        "pattern": "[-+](username|lastTimeOnline|firstname|lastname)"
      },
      "default": [
        "-lastTimeOnline",
        "+username"
      ]
    },
    "filterItemTypes": {
      "name": "itemType",
      "in": "query",
      "description": "Filter collected items on their type",
      "type": "array",
      "collectionFormat": "multi",
      "uniqueItems": true,
      "items": {
        "type": "string",
        "enum": [
          "AudioCassette",
          "Vinyl",
          "VHS"
        ]
      }
    },
    "userAgent": {
      "name": "User-Agent",
      "description": "All API consumers MUST provide a user agent",
      "type": "string",
      "in": "header",
      "required": true
    },
    "SFEBFEnr": {
      "name": "SFEBFEnr",
      "description": "BFE nummer for Samlet Fast Ejendom",
      "in": "query",
      "type": "string",
      "format": "int",
      "default": 9968514
    }
  }
}